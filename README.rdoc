Steps to download as CSV
==========================

Ruby has csv handling libraries so just call

require 'csv'- in config/application.erb

in controller
--------------

respond_to do |format|
      format.html
      format.csv{ render text: @products.to_csv}
      format.xls{ render text: @products.to_csv(col_sep: "\t")}
    end
----------------
this converts the html to both csv and xls

in model
---------------
def self.to_csv(options={})
		CSV.generate(options) do |csv|
			csv << column_names
			all.each do |product|
				csv << product.attributes.values_at(*column_names)
			end
		end
	end
	-----------------

	and in your index page just at browser address bar just add .csv or .xls the file gets downloaded
	if you want to add link in page then 

	<%= link_to "CSV", products_path(format: "csv") %>
	<%= link_to "xls", products_path(format: "xls") %>
steps to upload as CSV
======================

in model.rb add

	def self.import(file)
 	 allowed_attributes = [ "id","name","released_on","price","created_at","updated_at"]
 	 spreadsheet = open_spreadsheet(file)
 	 header = spreadsheet.row(1)
  	(2..spreadsheet.last_row).each do |i|
  	  row = Hash[[header, spreadsheet.row(i)].transpose]
   	 product = find_by_id(row["id"]) || new
   	 product.attributes = row.to_hash.select { |k,v| allowed_attributes.include? k }
   	 product.save!
 	 end
	end


	def self.open_spreadsheet(file)
		case File.extname(file.original_filename)
		when ".csv" then Roo::Csv.new(file.path, nil,:ignore)
			when ".xls" then Roo::Excel.new(file.path, nil,:ignore)
				when ".xlsx" then Roo::Excel.new(file.path, nil,:ignore)
				else raise "unknown file type: #{file.original_filename}"
				end
			end


in index add

<h2>Import Products</h2>
<%= form_tag import_products_path, multipart: true do %>
 <%= file_field_tag :file %>
 <%= submit_tag "import" %>
 <% end %>